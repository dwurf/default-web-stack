#############################################################################
# A new default web stack - using docker
# 
# Based on the ideas in Simon Willison's talk:
# https://www.youtube.com/watch?v=P68zXJ_ACCE
# 
# Usage (for development):
#    Install docker-toolbox (or docker-engine + docker-compose)
#    Create a django project
#    docker-compose up -d
#    open https://localhost/
#############################################################################

#############################################################################
# nginx reverse proxy
# 
# This is the entry point for the stack, responsible for SSL termination and
# access logs
#############################################################################
proxy:
    container_name: proxy
    image: jwilder/nginx-proxy:latest
    restart: always
    volumes: 
        - /var/run/docker.sock:/tmp/docker.sock:ro
        # Note: use letsencrypt container to maintain certs
        # These volumes are required for that to work
        - /srv/docker/letsencrypt:/etc/nginx/certs:ro
        - /etc/nginx/vhost.d
        - /usr/share/nginx/html
    ports:
        - 80:80
        - 443:443

#############################################################################
# letsencrypt client service
# 
# auto-generate and maintain SSL certs, adds to nginx-proxy
#############################################################################
letsencrypt:
    container_name: letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro
        - /srv/docker/letsencrypt:/etc/nginx/certs:rw
    volumes_from:
        - proxy

#############################################################################
# varnish web cache
# 
# varnish will cache HTTP content according to the rules in the caching 
# headers. It can be configured to perform other caching tasks such as
# micro-caching, always caching certain types of content, etc.
#############################################################################
varnish:
    container_name: varnish
    image: eeacms/varnish:4s
    restart: always
    links:
        - loadbalancer1:node1
    # Useful for debugging
    #ports:
    #    - 6081:6081
    # For creating a custom config
    #volumes:
    #    - /srv/docker/varnish:/etc/varnish/conf.d
    expose:
        - 6081
    environment:
        - VIRTUAL_HOST=mysite.example.com
        - VIRTUAL_PORT=6081
        - LETSENCRYPT_HOST=mysite.example.com
        - LETSENCRYPT_EMAIL=mysite@example.com

#############################################################################
# haproxy load balancer
# 
# Distribute load to application instances.
# This works well but it does require a restart to pick up new app instances.
#############################################################################
loadbalancer1:
    container_name: lb1
    image: tutum/haproxy:0.2.4.1
    restart: always
    links:
        - app:app
    # Useful for debugging
    #ports:
    #    - 8010:80
    # For creating a custom config
    #volumes:
    #    - haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

#############################################################################
# memcached in-memory cache
# 
# Not used here. Use redis or couchbase instead.
#############################################################################
#memcached:
#    container_name: memcached
#    image: memcached
#    # Use 64MB
#    command: memcached -m 64

#############################################################################
# redis in-memory data structure service
# 
# Use for content caching, queues, fast set unions, top 10 lists, ...
#############################################################################
redis:
    container_name: redis
    image: redis:3.0.7-alpine 

#############################################################################
# SOLR
# 
# Search...
#############################################################################
solr:
    container_name: solr
    image: solr:5.5.0

#############################################################################
# Celery
# 
# Asynchronous background workers
#############################################################################
celery:
    container_name: celery
    image: celery:3.1.20
    links:
        - celeryq:redis
    environment:
        - CELERY_BROKER_URL=redis://redis

#############################################################################
# Celery's queue - redis back-end
# 
# Queue for asynchronous background tasks
#############################################################################
celeryq:
    container_name: celeryq
    image: redis:3.0.7-alpine 

#############################################################################
# Postgresql database
# 
# Main data storage component for django. This is the bit you back up!
#############################################################################
db:
    container_name: db
    image: postgres:9.5.1
    volumes:
        - /srv/docker/mysite_db:/var/lib/postgresql/data
    environment:
        - POSTGRES_USER=db
        - POSTGRES_PASSWORD=secret

#############################################################################
# Your application code
# 
# Uses django (but could be rails, tomcat, php, ...)
#############################################################################
app:
    container_name: app
    build: .
    # Useful for debugging
    #ports:
    #    - 8000:8000
    volumes:
        - .:/usr/src/app
    links:
        - db:db
        - redis:redis
        - solr:solr

